---
# This role does Capacity Based Placement Optimization

# Tasks to find the best suitable PowerMax storage pool 
# for the given size and service level

- name: Show error message on invalid cap_unit
  fail:
    msg: "Please provide valid value for cap_unit."
  when: not cap_unit or cap_unit|length == 0

- name: Show error message on invalid choice of cap_unit
  fail:
    msg: "cap_unit supports 'GB' or 'TB'."
  when: cap_unit != 'GB' and cap_unit != 'TB'

- name: set fact for type of size
  set_fact:
    size_type: "{{ size | type_debug }}"

- name: Show error message on invalid type of size
  fail:
    msg: "Please provide valid value of size."
  when: size_type != 'float' and size_type != 'int'

- name: Take size with no change if the cap_unit is GB
  set_fact:
    size_gb: "{{ size | float }}"
  when: cap_unit == 'GB'

- name: Convert size to GB if the cap_unit is TB
  set_fact:
    size_gb: "{{ size * 1024 | float }}"
  when: cap_unit == 'TB'

- name: Get the list of PowerMax arrays from Unisphere
  dellemc.powermax.info:
    unispherehost: "{{ unispherehost }}"
    verifycert: "{{ verifycert }}"
    user: "{{ user }}"
    password: "{{ password }}"
  register: arrays

- name: Get the list of PowerMax arrays from Unisphere
  dellemc.powermax.info:
    unispherehost: "{{ unispherehost }}"
    verifycert: "{{ verifycert }}"
    user: "{{ user }}"
    password: "{{ password }}"
    serial_no: "{{ item }}"
    gather_subset:
      - "srp"
  loop: "{{ arrays.Arrays | list }}"
  register: pool_list

- name: Get the list of pools across all discovered arrays
  dellemc.powermax.storagepool:
    unispherehost: "{{ unispherehost }}"
    verifycert: "{{ verifycert }}"
    user: "{{ user }}"
    password: "{{ password }}"
    serial_no: "{{ item.0.item }}"
    pool: "{{ item.1.srpId }}"
    state: 'present'
  register: pools
  with_subelements:
    - "{{ pool_list.results }}"
    - StorageResourcePools

- name: Get best suitable Pool using our python sorting module
  register: assigned_pool
  process_storage_pool_dict:
    unispherehost: "{{ unispherehost }}"
    verifycert: "{{ verifycert }}"
    user: "{{ user }}"
    password: "{{ password }}"
    pool_data: "{{ pools.results | map(attribute='pool_details') | list }}"
    size: "{{ size_gb }}"
    service_level: "{{ service_level | default(omit) }}"
    sg_name: "{{ sg_name | default(omit) }}"

- name: Debug print assigned pool
  debug:
    var: assigned_pool